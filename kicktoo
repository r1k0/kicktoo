#!/usr/bin/env bash

VERSION=4

start_time_in_secs=$(date +%s)

debug="yes"
verbose="yes"
autoresume="yes"
removeresume="no"
nocolor="no"

# SIGHUP   1 Term Hangup detected on controlling terminal
#                 or death of controlling process
# SIGINT   2 Term Interrupt from keyboard
# SIGQUIT  3 Core Quit from keyboard
# SIGILL   4 Core Illegal Instruction
# SIGABRT  6 Core Abort signal from abort(3)
# SIGSEGV 11 Core Invalid memory reference
# SIGPIPE 13 Term Broken pipe: write to pipe with no readers
# don't trap SIGTERM or trap_cleanup will run on successful installs
trap "trap_cleanup" SIGHUP SIGINT SIGQUIT SIGILL SIGABRT SIGSEGV SIGPIPE

if [ "$(whoami)" != "root" ]; then
    echo "You must be root"
    exit 1
fi

has() {
    if hash "$1" &>/dev/null; then
        true
    else
        error "$1: core tool missing from livecd!"
        echo "use the package manager to install it"
        echo "or use another livecd."
        exit 1
    fi
}

import() {
    local module=$1
    if source modules/"${module}".sh >/dev/null >&1; then
        sourcedir="$(pwd)/modules"
        true
    elif source /usr/share/kicktoo/modules/"${module}".sh >/dev/null >&1; then
        sourcedir="/usr/share/kicktoo/modules"
        true
    else
        echo "critical error - cannot load module ${module} - exiting!"
        exit 1
    fi
    debug import "imported module ${module} from ${sourcedir}"
}

usage() {
    msg=$1
    [ -n "${msg}" ] && echo -e "${msg}\n"

    cat <<EOF
Usage:
    $0 [options]

Options:
    -p, --profile <file>  Run the profile
    -u, --dump            Dump config to stdout
    -i, --import  <file>  Import and run config from export
    -c, --client  <host>  Act as a client and fetch profiles from a kicktood daemon
    -r, --removeresume    Clear any previously set resume points
    -n, --noautoresume    Turn off autoresume
    -h, --help            This
    -q, --quiet           Disable verbose and debug
    --nocolor             No color
    --version             Print version

Tip:
    read profiles/config.txt for all profile features and options

EOF
}

dump_config() {
    echo '# === START VARIABLES ==='
    set -o posix
    set |
        grep "^[a-z]"                |
        sed 's/^export_.*/#&/g'      |
        sed 's/^profile_set.*/#&/g'  |
        sed 's/^autoresume.*/#&/g'   |
        sed 's/^removeresume.*/#&/g' |
        sed 's/^dump_conf.*/#&/g'    |
        sed 's/^verbose.*/#&/g'      |
        sed 's/^debug.*/#&/g' &&
        echo '# === END VARIABLES ==='
    echo '# === START FUNCTIONS ==='
    # only export custom functions, namely ^pre_*|^post_*
    for i in $(declare -F | awk '$3 ~ /(^pre_)|(^post_)/ { print }' | cut -d' ' -f3); do
        type "${i}" | grep -v 'is a function'
    done
    echo '# === END FUNCTIONS ==='
    exit 0
}

#########################################################################
# main
#########################################################################

if [ ${#} -lt 1 ]; then
    usage
    exit 0
fi

while [ ${#} -gt 0 ]; do
    a=${1}
    shift
    case "${a}" in
    -h | --help)
        usage
        exit 0
        ;;
#    -d | --debug)
#        debug="yes"
#        ;;
#    -v | --verbose)
#        verbose="yes"
#        ;;
    -q | --quiet)
        verbose="no"
        debug="no"
        ;;
    -i | --import)
        import_set="yes"
        import_file=${1}
        [ -f "${import_file}" ] || {
            echo "'${import_file}' is not a file"
            exit 1
        }
        ;;
    -c|--client)
        server=${1}
        shift
        ;;
    -o | --chroot)
        chrootme="yes"
        ;;
    --close)
        closeme="yes"
        ;;
    -n | --noautoresume)
        autoresume="no"
        ;;
    -r | --removeresume)
        removeresume="yes"
        ;;
    --version)
        echo "Kicktoo version ${VERSION} based on Quickstart modules from agaffney"
        exit 0
        ;;
    --nocolor)
        nocolor="yes"
        ;;
    -p | --profile)
        profile_set="yes"
        profile="${1}"
        [ -f "${profile}" ] || {
            echo "'${profile}' is not a file"
            exit 1
        }
        ;;
    -u | --dump)
        verbose="no"
        debug="no"
        dump_conf="yes"
        ;;
    -*)
        usage "You have specified an invalid option: ${a}"
        exit 1
        ;;
    esac
    unset a
done

# import modules
for i in output \
    misc        \
    spawn       \
    fetcher     \
    bootloader  \
    partition   \
    runsteps    \
    profile     \
    server      \
    stepcontrol; do
    import ${i}
done
unset i

# nocolor overwrites output module
if [ "${nocolor}" == "yes" ]; then
    # shellcheck disable=SC2034
    GOOD='' WARN='' BAD='' HILITE='' BRACKET='' NORMAL=''
fi

# check for required programs on livecd
for a in bash \
    curl      \
    parted    \
    sfdisk    \
    fdisk     \
    grep      \
    shred     \
    egrep     \
    mount     \
    swapoff   \
    swapon    \
    mke2fs    \
    wget      \
    chroot    \
    tar       \
    whoami    \
    hostname  \
    hdparm    \
    awk       \
    blkid; do
    has "${a}"
done
unset a

# declare this array else configure_bootloader_grub() will fail
# shellcheck disable=SC2034
declare -A grub_install

# load default vars
source ${sourcedir}/defaults

# import config file
if [ "${import_set}" == "yes" ]; then
    notify "Importing '${import_file}' config variables"
    source "${import_file}"
fi

# fallback if we can't log runsteps
if ! spawn "mkdir -p ${autoresume_root_dir}"; then
    warn "Unable to create step point tracking directory"
    notify "Switching AUTORESUME back off"
    autoresume="no"
fi

# fetch profile from a kicktood daemon
if [ -n "${server}" ]; then
    server_init
    server_get_profile && { profile_set="yes"; profile="/tmp/kicktoo_profile"; }
fi

# set profile name
profile_name="$(get_filename_from_uri "${profile}" | sed 's/.profile//g')" #> /dev/null 2>&1)"
debug main "profile_name is: '${profile_name}'"

# set autoresume vars
autoresume_profile_name=${profile_name}
autoresume_profile_dir="${autoresume_root_dir}/${autoresume_profile_name}"

# check if we need to clear autoresume points before current run
if [ ${removeresume} == "yes" ]; then
    unset removeresume
    if [ -d "${autoresume_profile_dir}" ] && [ -n "${profile}" ]; then
        notify "Removing ${autoresume_profile_name} autoresume points"
        [ ${verbose} == "yes" ] && rm_opts="-rfv" || rm_opts="-rf"
        spawn "rm ${rm_opts} ${autoresume_profile_dir}" || die "Unable to remove ${autoresume_profile_name} autoresume points"
    fi
fi

# what arch am I running on?
arch=$(get_arch)
[ -z "${arch}" ] && die "Could not determine system architecture!"

# load profile
[ "${profile_set}" == "yes" ] && source "${profile}"
# profile variables are now accessible
# export  variables are now accessible (i.e. do_luks) from profile.sh functions

# now we know which distro we're running on
# source distro specific modules to overwrite gentoo
# here

# dump config to screen
if [ "${dump_conf}" == "yes" ]; then
    dump_config
fi

#if [ "${export_set}" == "yes" ]; then
#    export_profile
#fi

! touch "${logfile}" 2>/dev/null && {
    error "Logfile is not writeable!"
    exit 1
}

# if autoresume is set and the current profile's track directory does not exist, create it
if [ ${autoresume} == "yes" ] && ! [ -d "${autoresume_profile_dir}" ]; then
    spawn "mkdir -p ${autoresume_profile_dir}" || die "Unable to create autoresume tracking directory"
fi

# check for programs needed for custom setups
[ "${do_raid}" == "yes" ] && has "mdadm"
[ "${do_lvm}"  == "yes" ] && has "pvcreate"
[ "${do_luks}" == "yes" ] && has "cryptsetup"
if [ -n "${profile}" ]; then
    grep -q xz "${profile}"      && has "unxz"
    grep -q gptpart "${profile}" && has "sgdisk"
fi

# chroot into a broken profile run
if [ "${chrootme}" == "yes" ]; then
    import chroot
    chroot_into
    exit $?
fi
# close devices setup by --chroot
if [ "${closeme}" == "yes" ]; then
    chroot_dir="/mnt/chroot" cleanup
    exit $?
fi

# match emerge's verbosity to kicktoo's
[ "${verbose}" == "yes" ] && [ "${debug}"   == "no"  ] && emerge_global_opts+=" -qv"
[ "${debug}"   == "yes" ] && [ "${verbose}" == "no"  ] && emerge_global_opts+=" -v"
[ "${verbose}" == "yes" ] && [ "${debug}"   == "yes" ] && emerge_global_opts+=" -v"

# don't run if the minimum is not set
if [ -z "${profile}" ] && [ -z "${import_file}" ]; then
    error "Nothing to do..."
    usage
    exit 1
fi
# don't run if both are set
if [ "${profile_set}" == "yes" ] && [ -n "${import_file}" ]; then
    error "Which one is it? Import config or profile? You lose, try again"
    usage
    exit 1
fi

#########################################################################
# runsteps
#########################################################################

# make sure it's clean before
runstep starting_cleanup          "Cleaning up system environment"

debug main "Pushing system for ${arch}"

runstep run_pre_install_script    "Running pre-install script if any"

runstep partition                 "Partitioning"
runstep setup_mdraid              "Setting up RAID arrays"
runstep setup_luks                "Setting up LUKS devices"
runstep setup_lvm                 "Setting up LVM volumes"
runstep format_devices            "Formatting devices"
runstep format_devices_luks       "Formatting LUKS devices"
runstep mount_local_partitions    "Mounting local partitions"
runstep mount_network_shares      "Mounting network shares"
runstep fetch_stage_tarball       "Fetching stage tarball"
runstep unpack_stage_tarball      "Unpacking stage tarball"
runstep prepare_chroot            "Preparing chroot"
runstep setup_fstab               "Setting up /etc/fstab"
runstep create_mdadmconf          "Setting up /etc/mdadm.conf"
runstep create_dmcrypt            "Setting up /etc/conf.d/dmcrypt"
runstep create_makeconf           "Creating custom make.conf"
runstep set_locale                "Setting locale"
runstep fetch_repo_tree           "Fetching repository tree"
runstep unpack_repo_tree          "Unpacking repository tree"
runstep set_profile               "Setting up profile with eselect"
runstep copy_kernel               "Copying pre compiled kernel"
runstep copy_initramfs            "Copying pre packaged initramfs"
runstep fetch_kernel_tarball      "Fetching pre compiled kernel package"
runstep unpack_kernel_tarball     "Unpacking kernel tarball"
runstep install_kernel_builder    "Installing kernel builder"
runstep build_kernel              "Building kernel"
runstep install_initramfs_builder "Installing initramfs builder"
runstep build_initramfs           "Building initramfs"
runstep setup_network_post        "Setting up post-install networking"
runstep setup_root_password       "Setting up root password"
runstep setup_timezone            "Setting up timezone"
runstep setup_keymap              "Setting up keymap"
runstep setup_host                "Setting up hostname"
runstep setup_domain              "Setting up domain name"
runstep install_extra_packages    "Compiling extra packages"
runstep install_bootloader        "Compiling bootloader"
runstep configure_bootloader      "Configuring bootloader"
runstep add_and_remove_services   "Adding and removing services"

runstep run_post_install_script   "Running post-install script if any"
runstep finishing_cleanup         "Cleaning up system environment"

notify "Install completed in $(secs_to_minutes_to_hours "$(($(date +%s) - ${start_time_in_secs}))")"

[ "${reboot}" == "yes" ] && notify "Rebooting..." && reboot

exit 0
